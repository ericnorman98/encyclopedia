# -*- eval: (add-hook 'after-save-hook (lambda nil (org-babel-tangle)) nil t); -*-
#+TITLE: Encyclopedia
#+PROPERTY: header-args:elisp :tangle ~/.emacs.d/lisp/encyclopedia.el :results silent
#+STARTUP: overview

* Lexical Binding
#+begin_src elisp
;;; encyclopedia.el --- -*- lexical-binding: t -*-
#+end_src

* Paths
#+begin_src elisp

(defvar encyclopedia-root-path (expand-file-name "~/encyclopedia"))

#+end_src

#+RESULTS:
: encyclopedia-root-path

* Misc Vars
#+begin_src elisp

(defvar encyclopedia-match-file-regexp "^[0-9]+\\-.*\\.org$")

#+end_src

#+RESULTS:
: encyclopedia-match-file-regexp

* Themes
** Vars
#+begin_src elisp
(defvar encyclopedia-theme-default 'dark)
#+end_src

#+RESULTS:
: dark

#+begin_src elisp
(setq encyclopedia-theme-current encyclopedia-theme-default)
#+end_src

#+RESULTS:
: dark

#+begin_src elisp
(defvar encyclopedia-theme-color-names
      '("bg" "bg-alt" "white" "brightblack0"
        "brightblack1" "brightblack2"
        "brightblack3" "brightblack4"
        "brightblack5" "brightblack6"
        "black" "fg" "fg-alt" "fg-hc"
        "red" "orange" "green" "teal"
        "yellow" "blue" "dark-blue" "magenta"
        "violet" "cyan" "dark-cyan"))
#+end_src

** Dark
#+begin_src elisp
(defvar encyclopedia-theme-theme-dark
      '((bg           . "#282c34")
        (bg-alt       . "#21242b")
        (white        . "#1B2229")
        (brightblack0 . "#1c1f24")
        (brightblack1 . "#202328")
        (brightblack2 . "#23272e")
        (brightblack3 . "#3f444a")
        (brightblack4 . "#5B6268")
        (brightblack5 . "#73797e")
        (brightblack6 . "#9ca0a4")
        (black        . "#DFDFDF")
        (fg           . "#bbc2cf")
        (fg-alt       . "#5B6268")
        (fg-hc        . "#f0f0f0")
        (red          . "#ff6c6b")
        (orange       . "#da8548")
        (green        . "#98be65")
        (teal         . "#4db5bd")
        (yellow       . "#ECBE7B")
        (blue         . "#51afef")
        (dark-blue    . "#2257A0")
        (magenta      . "#c678dd")
        (violet       . "#a9a1e1")
        (cyan         . "#46D9FF")
        (dark-cyan    . "#5699AF")))
#+end_src

#+RESULTS:
: encyclopedia-theme-theme-dark

** Light
#+begin_src elisp
(defvar encyclopedia-theme-theme-light
      '((bg           . "#fafafa")
        (bg-alt       . "#f0f0f0")
        (white        . "#f0f0f0")
        (brightblack0 . "#e7e7e7")
        (brightblack1 . "#dfdfdf")
        (brightblack2 . "#c6c7c7")
        (brightblack3 . "#9ca0a4")
        (brightblack4 . "#383a42")
        (brightblack5 . "#202328")
        (brightblack6 . "#1c1f24")
        (black        . "#1b2229")
        (fg           . "#383a42")
        (fg-alt       . "#c6c7c7")
        (fg-hc        . "#0f0f0f")
        (red          . "#e45649")
        (orange       . "#da8548")
        (green        . "#50a14f")
        (teal         . "#4db5bd")
        (yellow       . "#986801")
        (blue         . "#4078f2")
        (dark-blue    . "#a0bcf8")
        (magenta      . "#a626a4")
        (violet       . "#b751b6")
        (cyan         . "#0184bc")
        (dark-cyan    . "#005478")))
#+end_src

#+RESULTS:
: encyclopedia-theme-theme-light

** Getters

#+begin_src elisp
(defvar encyclopedia-theme-themes
      (list (cons 'dark encyclopedia-theme-theme-dark)
            (cons 'light encyclopedia-theme-theme-light)))
#+end_src

#+begin_src elisp
(defun encyclopedia-theme-get-theme (theme)
  (assoc theme encyclopedia-theme-themes))
#+end_src

#+RESULTS:
: encyclopedia-theme-get-theme

#+begin_src elisp
(defun encyclopedia-theme-get-color (theme color)
  (cdr (assoc color (encyclopedia-theme-get-theme theme))))
#+end_src

#+RESULTS:
: encyclopedia-theme-get-color

#+begin_src elisp :tangle no
(encyclopedia-theme-get-color 'dark 'bg)
#+end_src

#+RESULTS:
: #282c34

* Babel
#+begin_src elisp
(org-babel-lob-ingest (concat encyclopedia-root-path "/lob.org"))
#+end_src

#+begin_src elisp
(defun encyclopedia-babel-get-header-args:jupyter-python (slug)
  (list (cons :exports "results")
        (cons :session slug)
        (cons :results "raw")
        (cons :eval "never")
        (cons :pandoc t)
        (cons :async "yes")
        (cons :kernel "python")))
#+end_src

#+RESULTS:
: encyclopedia-babel-get-header-args:jupyter-python

** Inline JS
#+begin_src elisp
(add-to-list 'org-src-lang-modes '("inline-js" . javascript))
(defvar org-babel-default-header-args:inline-js
  '((:results . "html")
    (:exports . "results")))
(defun org-babel-execute:inline-js (body _params)
  (format "<script type=\"text/javascript\">\n%s\n</script>" body))
#+end_src

* Document
** Files
#+begin_src elisp
(defun encyclopedia-document-list-documents ()
  (directory-files encyclopedia-root-path nil encyclopedia-match-file-regexp))
#+end_src

** Slug
#+begin_src elisp
(defun encyclopedia-document-title-to-slug (title)
  (org-roam--title-to-slug title))
#+end_src

#+begin_src elisp
(defun encyclopedia-document-slug-extract ()
  (encyclopedia-document-title-to-slug (car (org-roam--extract-titles-title))))
#+end_src

** COMMENT Tags
#+begin_src elisp
(defun encyclopedia-document-get-tags ()
  (interactive)
  (org-roam--extract-tags))
#+end_src

#+begin_src elisp
(defun encyclopedia-document-get-tags-file (file)
  (with-temp-buffer
    (insert-file-contents file)
    (encyclopedia-document-get-tags)))
#+end_src

#+begin_src elisp
(defun encyclopedia-document-get-tags-files ()
  (delete-dups (apply 'append (let ((documents (encyclopedia-document-list-documents)))
                                (mapcar (lambda (file)
                                          (with-temp-buffer
                                            (insert-file-contents file)
                                            (if (encyclopedia-document-thumb-extract)
                                                (encyclopedia-document-get-tags)))) documents)))))
#+end_src

#+begin_src elisp :results replace :tangle no
(encyclopedia-document-get-tags-files)
#+end_src

#+RESULTS:
| statistics | hypothesis | testing | test | dynamical | systems | population | traveling | waves | diffusion | instability | kuramoto | model | oscillator | synchronisation | fractal | tree | recursion | ricker | map | chaos | graph | theory | erdos | renyi | small | world | network | mandelbrot | set | distribution | normal | henon | attractor | linear | least | squares |

** Backlinks
#+begin_src elisp
(defun encyclopedia-document-backlinks-file (file)
  (if (org-roam--org-roam-file-p file)
      (--reduce-from
       (concat acc (format "- [[file:%s][%s]]\n"
                           (file-relative-name (car it) org-roam-directory)
                           (org-roam-db--get-title (car it))))
       "" (org-roam-db-query [:select [source] :from links :where (= dest $s1)] file))
    ""))
#+end_src

** Thumbnail
#+begin_src elisp
(setq encyclopedia-document--thumb-search "#+thumb:")
#+end_src

#+begin_src elisp
(defun encyclopedia-document--goto-thumb ()
  (goto-char (point-min))
  (if (search-forward encyclopedia-document--thumb-search nil t)
      (progn
        (while (not (equal 'keyword (car (org-element-at-point))))
          (search-forward encyclopedia-document--thumb-search nil t))
        (org-babel-next-src-block)
        (let ((respos (org-babel-where-is-src-block-result)))
          (if respos
              (progn
                (goto-char respos)
                (beginning-of-line 2))))
        )
    nil))
#+end_src

#+begin_src elisp
(defun encyclopedia-document-thumb-extract ()
  (interactive)
  (save-excursion
    (encyclopedia-document--goto-thumb)
    (org-element-property :path (org-element-context))))
#+end_src

* Export
** Preprocess
#+begin_src elisp
(defun encyclopedia-export-org-export-preprocessor (backend)
  (let ((links (encyclopedia-document-backlinks-file (buffer-file-name))))
    (flush-lines "^- tags ::")
    (save-excursion
      (goto-char (point-min))
      (insert (encyclopedia-export-latex-generate-headers encyclopedia-theme-current))
      (if (eq backend 'html)
          (progn
            (goto-char (point-max))
            (unless (string= links "")
              (insert (concat "\n* Backlinks\n") links)))))))
#+end_src

#+begin_src elisp
(add-hook 'org-export-before-processing-hook 'encyclopedia-export-org-export-preprocessor)
#+end_src

** Latex
#+begin_src elisp
(defun encyclopedia-export-latex-generate-headers (theme)
  (let-alist (encyclopedia-theme-get-theme theme)
    (concat "#+LATEX_HEADER: \\usepackage{pagecolor}\n"
            "#+LATEX_HEADER: \\usepackage[parfill]{parskip}\n"
            "#+LATEX_HEADER: \\usepackage[margin=2cm]{geometry}\n"
            "#+LATEX_HEADER: \\usepackage{xcolor}\n"
            (concat "#+LATEX_HEADER: \\definecolor{bg}{HTML}{"(substring .bg 1)"}\n"
                    "#+LATEX_HEADER: \\definecolor{white}{HTML}{"(substring .fg-hc 1)"}\n")
            "#+LATEX_HEADER: \\pagecolor{bg}\n"
            "#+LATEX_HEADER: \\color{white}\n")))
#+end_src

** Html
#+begin_src elisp
(defun encyclopedia-export-org-video-link-export (path desc backend)
  (let ((ext (file-name-extension path)))
    (cond
     ((eq 'html backend)
      (concat "<div class=\"figure\">"
              "<video autoplay loop>"
              "<source type=\"video/"ext"\" src=\""path"\" />"
              "</video>"
              "</div>"))
     ;; fall-through case for everything else
     (t
      path))))
#+end_src

#+begin_src elisp
(org-link-set-parameters
  "video"
  :export 'encyclopedia-export-org-video-link-export)
#+end_src

* HTML
#+begin_src elisp
(use-package esxml
  :straight t
  :ensure t)
#+end_src

#+begin_src elisp
(defun encyclopedia-export-template (content info)
  (concat
   "<!DOCTYPE html>"
   (sxml-to-xml
    `(html (@ (lang "en"))
           (head
            (meta (@ (charset "utf-8")))
            (meta (@ (author "Eric Norman")))
            (meta (@ (name "viewport") (content "width=device-width, initial-scale=1.0")))
            (link (@ (rel "stylesheet")
                     (href "./css/bootstrap.css")))
            (link (@ (rel "stylesheet")
                     (href "./css/all.css")))
            (link (@ (rel "stylesheet")
                     (href "./css/style.css")))
            ,(org-html--build-mathjax-config info))
           (body
            ,(encyclopedia-html-preamble)
            (div (@ (class "container")
                    (id "main"))
                 ,content))))))
#+end_src


** Preamble
#+begin_src elisp
(defun encyclopedia-html-preamble ()
  (sxml-to-xml
   `(div (@ (class "container text-center"))
         (a (@ (href "/"))
            (img (@ (class "profile")
                    (src "/img/profile.jpg")))))))
#+end_src
** Sitemap
#+begin_src elisp
(defun encyclopedia-html-entry-link (file content)
  (sxml-to-xml
   `(a (@ (href ,(string-replace ".org" ".html" file)))
       ,content)))
#+end_src

#+begin_src elisp
(defun encyclopedia-html-sitemap-entry (file)
  (with-temp-buffer
    (insert-file-contents file)
    (let* ((title (car (org-roam--extract-titles-title)))
           (slug (encyclopedia-document-title-to-slug title))
           (thumb (encyclopedia-document-thumb-extract)))
      (message (format "%s %s:%s" file thumb (and thumb (file-exists-p thumb))))
      (if (and thumb (file-exists-p thumb))
          (sxml-to-xml
           `(div (@ (class "col-sm-6"))
                 (div (@ (class "card mb-3"))
                      (div (@ (class "row g-0"))
                           (div (@ (class "col-md-4"))
                                ,(encyclopedia-html-entry-link file `(img (@ (src ,thumb)
                                                                             (class "card-img-top")))))
                           (div (@ (class "col-md-8"))
                                (div (@ (class "card-body"))
                                     ,(encyclopedia-html-entry-link file `(h5 (@ (class "card-title")) ,title))))))))
        ""))))
#+end_src

#+begin_src elisp
(defun encyclopedia-html-sitemap ()
  (let ((files (encyclopedia-document-list-documents)))
    (sxml-to-xml
     `(div (@ (class "row"))
           ,(mapconcat #'encyclopedia-html-sitemap-entry
                       files
                       "")))))
#+end_src

* Publish

** Vars
#+begin_src elisp
(defvar encyclopedia-publish-url nil)
#+end_src

#+begin_src elisp
(defvar encyclopedia-publish-sitemap-title "Encyclopedia")
#+end_src

** Configure
#+begin_src elisp
(org-export-define-derived-backend 'encyclopedia-html 'html
  :translate-alist
  '((template . encyclopedia-export-template)))

(defun encyclopedia-org-html-publish-to-html (plist filename publish-dir)
  (org-publish-org-to 'encyclopedia-html
                      filename
                      ".html"
                      plist
                      publish-dir))

(defun encyclopedia-publish-configure (publish-dir)
  (message (concat "Configure encyclopedia publising to " publish-dir))

  (setq org-babel-default-lob-header-args '((:eval . "never"))
        org-babel-default-header-args:jupyter-python '((:exports . "results")))

  (setq org-export-babel-evaluate nil
        org-export-use-babel t
        org-export-with-broken-links t
        org-confirm-babel-evaluate nil
        org-export-with-section-numbers nil
        org-html-html5-fancy t
        org-export-with-toc nil
        org-publish-project-alist
        `(("encyclopedia"
           :components ("encyclopedia-notes" "encyclopedia-static"))
          ("encyclopedia-notes"
           :base-directory ,encyclopedia-root-path
           :base-extension "org"
           :exclude "setup.org\\|lob.org\\|encyclopedia.org"
           :publishing-directory ,publish-dir
           :publishing-function encyclopedia-org-html-publish-to-html
           :html-html5-fancy t
           :html-doctype "html5"
           :recursive t
           :headline-levels 4
           :with-toc nil
           :exclude "node_modules")
          ("encyclopedia-static"
           :base-directory ,encyclopedia-root-path
           :base-extension "css\\|js\\|png\\|jpg\\|gif\\|svg\\|svg\\|json\\|mp4"
           :publishing-directory ,publish-dir
           :exclude "node_modules"
           :recursive t
           :publishing-function org-publish-attachment))))
#+end_src
* Tangle

#+begin_src elisp
(defun encyclopedia-tangle-target (slug)
  (concat "encyclopedia/"slug".py"))
#+end_src

#+begin_src elisp
(defun encyclopedia-tangle (&optional file)
  (interactive)
  (setq output "")
  (with-current-buffer (if file (find-file-noselect file) (current-buffer))
    (let ((tangle-target (encyclopedia-tangle-target (encyclopedia-document-slug-extract))))
      (write-region "" nil tangle-target)
      (org-babel-map-src-blocks file
        (if (string-match-p (regexp-quote ":lib yes") header-args)
            (let* ((info (org-babel-get-src-block-info))
                   (body (org-babel-expand-noweb-references info)))
              (setq output (concat output body "\n")))))
      (write-region output nil tangle-target))))
#+end_src

#+begin_src elisp
(defun encyclopedia-tangle-file (file)
  (org-babel-tangle-file file))
#+end_src

#+begin_src elisp
(defun encyclopedia-tangle-files ()
  (interactive)
  (let ((files (encyclopedia-document-list-documents)))
    (cl-loop for file in files
             do (message (concat "Tangling " file "..."))
             do (encyclopedia-tangle file))))
#+end_src

#+begin_src elisp
(defun encyclopedia-execute (&optional file)
  (interactive)
  (with-current-buffer (if file (find-file-noselect file) (current-buffer))
    (org-babel-execute-buffer)))
#+end_src

#+begin_src elisp
(defun encyclopedia-execute-files ()
  (interactive)
  (let ((files (encyclopedia-document-list-documents)))
    (cl-loop for file in files
             do (message (concat "Executing " file "..."))
             do (encyclopedia-execute file))))
#+end_src

* Provide
#+begin_src elisp
(provide 'encyclopedia)
#+end_src
