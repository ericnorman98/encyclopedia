#+title: Likelihood function
#+roam_tags:

#+call: init()

#+begin_src jupyter-python :lib yes
from sympy import *
from sympy.stats import *
from sympy.stats.frv_types import BinomialDistribution
from pyorg.latex import *
from encyclopedia.statistics import *
#+end_src

* Likelihood function
#+begin_src jupyter-python :lib yes
L = Function('L')
N = Symbol('N', integer=True, positive=True)
def likelihood(X, x, i, parameter, observations=N):
    dens = density(X)
    tmp = Symbol('z')
    if isinstance(dens, BinomialDistribution):
        dens = dens(tmp).args[0][0]
    else:
        dens = dens(tmp)
    return LEq(L, Lambda(parameter, Product(dens.subs(tmp, x[i]), (i, 1, observations)).doit()))
#+end_src

#+begin_src jupyter-python :lib yes
def likelihood_single(X, x, parameter):
    dens = density(X)
    if isinstance(dens, BinomialDistribution):
        dens = dens(x).args[0][0]
    else:
        dens = dens(x)
    return LEq(L, Lambda(parameter, dens))
#+end_src

#+begin_src jupyter-python :lib yes
l = Function('l')
def loglikelihood(X, x, i, parameter, observations=N):
    likl = likelihood(X, x, i, parameter, observations)
    return LEq(l, Lambda(parameter, log(likl.rhs.args[1]).expand(force=True)))
#+end_src
