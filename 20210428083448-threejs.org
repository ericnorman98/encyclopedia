#+title: Threejs
#+roam_tags:

#+call: init()

* Threejs
#+begin_src jupyter-python :session noise
import matplotlib.pyplot as plt
from PIL import Image
import numpy as np

noise = np.random.uniform(0, 255, size=[32, 32]).astype(np.uint8)
img = Image.fromarray(noise, 'L')
img.save('img/noise.png')
#+end_src

[[./img/noise.png]]

#+name: fragment-shader
#+begin_src glsl :exports none
uniform vec3 iResolution;
uniform float iTime;
uniform sampler2D iChannel0;

#define TIMESCALE 0.25
#define COLOR 0.7, 1.6, 2.8

void mainImage(out vec4 fragColor, in vec2 fragCoord)
{
    vec2 uv = fragCoord.xy / iResolution.xy;
    uv.x *= iResolution.x / iResolution.y;

    vec4 noise = texture2D(iChannel0, uv);
    fragColor = vec4(noise.x, noise.y, noise.z, 1.0);
}

void main() {
    mainImage(gl_FragColor, gl_FragCoord.xy);
}
#+end_src

#+name: main-script
#+begin_src inline-js :noweb yes :eval yes
import * as THREE from 'https://cdn.skypack.dev/three@v0.128.0';
function main() {
    const canvas = document.createElement('canvas');
    const script = document.getElementById('main-script');
    script.parentNode.insertBefore(canvas, script.nextSibling)
    const w = canvas.width = 512;
    const h = canvas.height = 512;
    const renderer = new THREE.WebGLRenderer({canvas});
    renderer.autoClearColor = false;
    const loader = new THREE.TextureLoader();
    const texture = loader.load('img/noise.png');
    texture.minFilter = THREE.NearestFilter;
    texture.magFilter = THREE.NearestFilter;
    texture.wrapS = THREE.RepeatWrapping;
    texture.wrapT = THREE.RepeatWrapping;
    const uniforms = {
        iTime: { value: 0 },
        iResolution: { value: new THREE.Vector3() },
        iChannel0: { value: texture },
    };

    const camera = new THREE.OrthographicCamera(
        -1, 1, 1, -1, -1, 1,
    );
    const scene = new THREE.Scene();
    const plane = new THREE.PlaneGeometry(2, 2);

    const fragmentShader = `
<<fragment-shader>>
`;

    const material = new THREE.ShaderMaterial({
        fragmentShader,
        uniforms,
    });
    scene.add(new THREE.Mesh(plane, material));

    function resizeRendererToDisplaySize(renderer) {
        const canvas = renderer.domElement;
        const width = canvas.clientWidth;
        const height = canvas.clientHeight;
        const needResize = canvas.width !== width || canvas.height !== height;
        if (needResize) {
            renderer.setSize(width, height, false);
        }
        return needResize;
    }

    function render(time) {
        time *= 0.001;  // convert to seconds

        resizeRendererToDisplaySize(renderer);

        const canvas = renderer.domElement;
        uniforms.iResolution.value.set(canvas.width, canvas.height, 1);
        uniforms.iTime.value = time;

        renderer.render(scene, camera);

        requestAnimationFrame(render);
    }
    requestAnimationFrame(render);
}

main();
#+end_src

Hello
