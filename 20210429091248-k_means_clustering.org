#+title: K-means clustering
#+setupfile: setup.org
#+roam_tags:

#+begin_src jupyter-python :results silent
import numpy as np
import matplotlib.pyplot as plt
#+end_src

* K-means clustering
1. Randomly choose $K$ observations as cluster centres $\pmb{m_i}$ and set
   $J_{\text{max}}$ to a positive integer.
2. For steps $j=1,\dots,J_{\text{max}}$
   a. Cluster allocation: $C(\pmb{x}_l) = \argmin_{1\le i\le K} ||\pmb{x}_l-\pmb{m}_i||^2$
   b. Cluster center update: $\pmb{m}_i=\frac{1}{N_i} \sum_{C(\pmb{x}_l)=i}\pmb{x}_l$
   c. Stop if no change to clustering $C$

#+begin_src jupyter-python :noweb yes
colors = [<<color("green")>>, <<color("blue")>>,
            <<color("orange")>>, <<color("magenta")>>,
            <<color("red")>>, <<color("cyan")>>]
cmap = ListedColormap(colors)
#+end_src

#+RESULTS:

#+begin_src jupyter-python :results output :noweb yes
np.random.seed(42)
K = 2
n = 100*K
N = np.zeros(K, dtype=int)+n//K
p = 2
x = np.concatenate([
    np.random.normal(0, 1, size=[N[0], 2]),
    np.random.normal(2, 1, size=[N[1], 2])
], axis=0)
m = np.zeros([K, p])
for i in range(K):
    m[i] = x[np.random.randint(N[i]*i, N[i]*(i+1))]

for _ in range(4):
    Cx = np.argmin(np.array([np.linalg.norm(x-m[i], axis=1)**2 for i in range(len(m))]), axis=0)
    _, N = np.unique(Cx, return_counts=True)
    m = np.array([(1/N[i])*np.sum(x[Cx==i], axis=0) for i in range(len(m))])

plt.scatter(x[:, 0], x[:, 1], c=Cx, cmap=cmap)
plt.scatter(m[:, 0], m[:, 1], color=<<color("red")>>)
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/d862f0dcf0d9dfe8605b5a6e01eaa369f2a8b905.png]]
