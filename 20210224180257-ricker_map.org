#+title: Ricker map
#+roam_tags: dynamical systems ricker map fractal chaos

#+call: init()

#+RESULTS:

* Ricker map
The Ricker map is a population model that can describe populations of fish in a
fishery and populations that exhibit cannibalism to offspring. The definition of
the map is as follows,

#+BEGIN_SRC jupyter-python :results silent
import matplotlib.pyplot as plt
import pyorg.plot as plot
import numpy as np
import pandas as pd
from encyclopedia.latex import *
from sympy import *
from ddeint import ddeint
from scipy.integrate import odeint
from matplotlib.animation import FuncAnimation
import numba
#+END_SRC

#+begin_src jupyter-python
tau, R, alpha = symbols('tau R alpha')
eta = IndexedBase('eta')
rickermap = Eq(eta[tau+1], R*eta[tau]*exp(-alpha*eta[tau]))
rickermap
#+end_src

#+RESULTS:
:RESULTS:
\begin{equation}{\eta_{\tau + 1}} = R e^{- \alpha {\eta_{\tau}}} {\eta_{\tau}}\end{equation}
:END:

where $\eta_{\tau}$ is the number of adults in generation $\tau$. $R$ is
modeling the number of children each adult can have and $\alpha$ is the rate of
cannibalism.

#+begin_src jupyter-python :exports none
def create_map(eq, *variables):
    eq_lm = numba.njit(lambdify(variables, eq.rhs))
    @numba.njit()
    def map_next(*args):
        return eq_lm(*args)
    return map_next
map_next = create_map(rickermap, eta[tau], R, alpha)
map_next(2.0, 1.0, 0.01)
#+end_src

#+RESULTS:
: 1.9603973466135105

#+begin_src jupyter-python :results silent
@numba.njit()
def map_steps(map_next, steps, x0, *params):
    x = x0
    tau_n = np.arange(steps)
    return tau_n, np.array([x0] + [x := map_next(x, *params) for _ in range(steps-1)])
#+end_src

#+name: src:fig:map_steps
#+BEGIN_SRC jupyter-python :noweb yes :results output
plt.figure(figsize=(4, 4))
N0_n = 900
alpha_n = 0.01
R_n = 16.0
steps = 100
tau_n, eta_n = map_steps(map_next, steps, N0_n, R_n, alpha_n)
plt.xlabel("$\\tau$")
plt.ylabel("$\\eta_{\\tau}$")
plt.title(f"$R={R_n}$")
plt.plot(tau_n, eta_n, lw=0.8)
#+END_SRC

#+attr_latex: :width 0.5\textwidth
#+RESULTS: src:fig:map_steps
[[file:./.ob-jupyter/cad3700224c79c0b738f209eb259eb3ba62f488f.png]]


** Bifurcation diagram
We can make a plot of the bifurcations in this system by plotting the last 100
values for each $R$ when simulating the model.
#+BEGIN_SRC jupyter-python :noweb yes :results output
plt.figure(figsize=(4, 4))
N0_n = 900
alpha_n = 0.01
Rs_n = np.arange(1.0, 30.0, 0.1)
steps = 300
bifur_values = []
for R_n in Rs_n:
    tau_n, eta_n = map_steps(map_next, steps, N0_n, R_n, alpha_n)
    bifur_values.extend([(R_n, e) for e in eta_n[-100:]])
bifur_values = np.array(bifur_values)
plt.scatter(bifur_values[:, 0], bifur_values[:, 1], s=4.0, lw=0.0)
plt.xlabel("$R$")
plt.ylabel("$\\eta_{\\tau}$")
#+END_SRC

#+RESULTS:
[[file:./.ob-jupyter/b095140f1743b4af4bae01add3a1a197ad84c541.png]]

#+thumb:
#+BEGIN_SRC jupyter-python :noweb yes :results output :exports none
plt.figure(figsize=(4, 4))
N0_n = 900
alpha_n = 0.01
Rs_n = np.arange(1.0, 30.0, 0.1)
steps = 300
bifur_values = []
for R_n in Rs_n:
    tau_n, eta_n = map_steps(map_next, steps, N0_n, R_n, alpha_n)
    bifur_values.extend([(R_n, e) for e in eta_n[-100:]])
bifur_values = np.array(bifur_values)
plt.scatter(bifur_values[:, 0], bifur_values[:, 1], s=4.0, lw=0.0)
plt.xticks([])
plt.yticks([])
#+END_SRC

#+RESULTS:
[[file:./.ob-jupyter/0c05ee30ac3a1e178239276890db1ca80ef84619.png]]


#+BEGIN_SRC jupyter-python :noweb yes :exports none
fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(8, 4))
N0_n = 900
alpha_n = 0.01
tt = np.linspace(0.0, 1.0, 500)
Rs_n = 1.0 + tt*29.0
steps = 300
ax1.set_xlim([0, 100])
ax1.set_ylim([0, 1100])
ax2.set_xlim([0, 30])
ax2.set_ylim([0, 1100])
line, = ax1.plot([], [], lw=1.0)
ax1.set_xlabel("$\\tau$")
ax1.set_ylabel("$\\eta_{\\tau}$")
ax2.set_xlabel("$R$")
ax2.set_ylabel("$\\eta_{\\tau}$")
title = ax1.set_title(f"$R={Rs_n[0]}$")
scatter = ax2.scatter([], [], lw=0.0, s=0.9)
progline = ax2.axvline(0, color=<<color("red")>>, lw=0.6)
iterations = []
scatter_points = []

def init():
    return [line, title, scatter, progline]

def animate(i):
    tau_n, eta_n = map_steps(map_next, steps, N0_n, Rs_n[i], alpha_n)
    scatter_points.extend([(Rs_n[i], e) for e in eta_n[-100:]])
    line.set_data(tau_n, eta_n)
    scatter.set_offsets(scatter_points)
    title.set_text(f"$R={Rs_n[i]:.2f}$")
    progline.set_xdata(Rs_n[i])
    return [line, title, scatter, progline]

anim = FuncAnimation(fig, animate, frames=len(Rs_n), init_func=init, interval=10, blit=True)
name = "rickermap_plot.mp4"
anim.save(name, fps=30)
plt.close(fig)
print("DONE")
#+END_SRC

#+RESULTS:
: DONE

[[video:rickermap_plot.mp4]]

** n-point cycles
We can find the number of n-point cycles by running the model beyond the
transient and taking the last n /unique/ points. See Figure [[fig:npoint_cycles]]
for examples of 1, 2, 3 and 4-point cycles.

#+srcname: src:fig:npoint_cycles
#+BEGIN_SRC jupyter-python :noweb yes
plt.figure(figsize=(4, 4))
N0_n = 900
alpha_n = 0.01
Rs_n = [5, 10, 23, 14]
steps = 40
for i, R_n in enumerate(Rs_n):
    plt.subplot(2, 2, i+1)
    tau_n, eta_n = map_steps(map_next, steps, N0_n, R_n, alpha_n)
    vals = eta_n[-(i+1):]
    for v in vals:
        plt.axhline(v, color=<<color("red")>>, lw=0.5, zorder=10)
    plt.plot(tau_n, eta_n, lw=0.5, color=<<color("green")>>)
    plt.yticks(vals)
    plt.title(f"$R={R_n}$")
    if i > 1:
        plt.xlabel("$\\tau$")
    if i % 2 == 0:
        plt.ylabel("$\\eta_{\\tau}$")
#+END_SRC

#+attr_latex: :width 0.5\textwidth
#+name: fig:npoint_cycles
#+caption: Four plots of a 1, 2, 3, and 4-point cycles from the model.
#+RESULTS: src:fig:npoint_cycles
[[file:./.ob-jupyter/ab154c6e91f5e9b7c60c6b8c1a1217f33fecb399.png]]


** Finding bifurcations numerically
We can find at which $R$ values n-point cycle bifurcations occur by running the
model for a range of $R$ and calculating $n$. See Figure [[fig:r1r2]] for a plot of
the two first values of $R_n$.

#+begin_src jupyter-python :results silent :noweb yes
def plot_rs(max_n, Rs_n, steps=10000, label=True):
    N0_n = 900
    alpha_n = 0.01
    max_cycles = 100
    cycles = []
    for i, R_n in enumerate(Rs_n):
        tau_n, eta_n = map_steps(map_next, steps, N0_n, R_n, alpha_n)
        vals = eta_n[-max_cycles:]
        plt.scatter([R_n for _ in range(len(vals))], vals, color=<<color("green")>>, lw=0.0, s=1.0)
        vals = np.floor(vals*10000)/10000
        n_cycles = len(np.unique(vals))
        cycles.append((R_n, n_cycles))
    cycles = np.array(cycles)
    x = cycles[:, 0]
    y = cycles[:, 1]
    y = np.maximum.accumulate(y)

    change = np.diff(y, prepend=np.inf)>0
    change = np.where(change)[0]
    changex = x[change].reshape([-1, 1])
    changey = y[change].reshape([-1, 1])
    features = np.concatenate((changex, changey), axis=1)

    xticks = np.sort(list(features[:2, 0]) + ([features[-1, 0]] if max_n > 2 else []))
    if label:
        plt.xticks(list(xticks), [f"$R_{i+1}\\approx {R_n:.3f}$" for i, R_n in enumerate(xticks)])
    else:
        plt.xticks(list(xticks))

    for R_n in features[:max_n, 0]:
        plt.axvline(R_n, color=<<color("red")>>, lw=0.5, zorder=10)

    plt.xlabel("$R$")
    plt.ylabel("$\\eta_{\\tau}$")
    return features
#+end_src

#+name: src:fig:r1r2
#+BEGIN_SRC jupyter-python :results output :noweb yes
plt.figure(figsize=(4, 4))
Rs_n = np.linspace(2.0, 15.0, 5000)
steps = 80000
max_n = 2
rs = plot_rs(max_n, Rs_n, steps)
#+END_SRC

#+attr_latex: :width 0.5\textwidth
#+caption: A plot showing $R_1$ and $R_2$ values of the first two bifurcations.
#+name: fig:r1r2
#+RESULTS: src:fig:r1r2
[[file:./.ob-jupyter/383b8ff2bb0006aae1a38089b77ca08d6818d799.png]]



** Finding the bifurcation limit $R_{\infty}$
By running the model longer and calculating more values of $R$, we can get an
approximation of $R_{\infty}$. See Figure [[fig:roo]] for a plot of more $R$ values.
See Figure [[fig:rs_limit_plot]] for a plot of the $R$ values against $n$, we can see that the limit approaches $R_{\infty}\approx 14.766$.

#+name: src:fig:roo
#+BEGIN_SRC jupyter-python :results output :noweb yes
plt.figure(figsize=(4, 4))
Rs_n = np.linspace(12, 15, 10000)
steps = 200000
max_n = 20
infR = plot_rs(max_n, Rs_n, steps, label=False)
#+END_SRC

#+caption: A plot of all the $R_n$ values found (the red vertical lines).
#+name: fig:roo
#+attr_latex: :width 0.8\textwidth
#+RESULTS: src:fig:roo
[[file:./.ob-jupyter/5a065f0591f96a90d67999cf3672bc495e1a8b56.png]]

#+srcname: src:fig:rs_limit_plot
#+begin_src jupyter-python :results output :noweb yes
from matplotlib.ticker import FormatStrFormatter
plt.figure(figsize=(4, 4))

allRs = np.concatenate([[rs[0, 0]], infR[:, 0]])
plt.plot(np.arange(len(allRs))+1, allRs, zorder=10)
plt.axhline(allRs[-1], ls='--', color=<<color("fg-hc")>>)
plt.yticks([allRs[0], allRs[1], allRs[2], allRs[-1]])
plt.gca().yaxis.set_major_formatter(FormatStrFormatter('%.4f'))
plt.xlabel("$n$")
plt.ylabel("$R$")
#+end_src

#+attr_latex: :width 0.5\textwidth
#+name: fig:rs_limit_plot
#+caption: A plot of the $R_n$ values, we can see that the limit $R_{\infty}$ is around $14.766$.
#+RESULTS: src:fig:rs_limit_plot
[[file:./.ob-jupyter/2d4ceeb2a6efd58ef04a09125eaadf90bd6028cc.png]]
