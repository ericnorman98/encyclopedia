#+title: Latex
#+roam_tags:
#+PROPERTY: header-args:jupyter-python :tangle encyclopedia/latex.py :mkdirp yes

#+call: init()

* Latex
** Imports
#+begin_src jupyter-python
from sympy import (Expr, Number, Float, Function, Matrix, Id, evaluate,
                   sympify, Symbol, Basic, Lambda, Function, lambdify, FunctionClass,
                   Add, Mul, Subs, Lt, Le, Ge, Gt, Eq, And, Implies, Integral, Derivative)
from sympy.stats import (Probability)
from sympy.logic.boolalg import Boolean
from sympy.core.relational import Relational
from sympy.core.compatibility import iterable
from sympy.printing.latex import LatexPrinter
from sympy.core._print_helpers import Printable
#+end_src
** Printers
#+begin_src jupyter-python
class PyorgLatexPrinter(LatexPrinter):
    def _print_Idx(self, expr):
        return expr.name

    def _print_Indexed(self, expr):
        tex_base = self._print(expr.base)
        tex = '{'+tex_base+'_{%s}}' % ''.join(
            map(self._print, expr.indices))
        return tex

    def _print_Probability(self, expr):
        return f"P[{','.join(self._print(arg) for arg in expr.args)}]"

    def _print_Expectation(self, expr):
        return f"E[{self._print(expr.args[0])}]"

    def _print_Variance(self, expr):
        return f"\\operatorname{{Var}}({self._print(expr.args[0])})"

    def _print_Determinant(self, expr):
        return f"\\operatorname{{det}}\\left({self._print(expr.args[0])}\\right)"

    @classmethod
    def printer(cls, expr, **kwargs):
        return cls(kwargs).doprint(expr)

class NoFuncParamsLatexPrinter(PyorgLatexPrinter):
    def _print_FunctionClass(self, expr):
        return expr.name

    # def _print_Function(self, expr):
    #     return expr.name

    def _print_UndefinedFunction(self, expr):
        return expr.name

    @classmethod
    def printer(cls, expr, **kwargs):
        return cls(kwargs).doprint(expr)

class FuncFirstArgBaseLatexPrinter(PyorgLatexPrinter):
    def _print_Function(self, expr):
        args = ','.join([self._print(arg) for arg in expr.args[1:]])
        if hasattr(expr, 'name'):
            return f"{expr.name}_{{{self._print(expr.args[0])}}}({args})"
        else:
            return super()._print_Function(expr)

    @classmethod
    def printer(cls, expr, **kwargs):
        return cls(kwargs).doprint(expr)
#+end_src

** Init
#+begin_src jupyter-python
def latex_set_printer(printer, settings=dict(mode='equation')):
    def _repr_latex_(self):
        return printer(settings=settings).doprint(self)

    Printable._repr_latex_ = _repr_latex_

def latex_print_with(printer, expr, settings=dict(mode='equation')):
    def _repr_latex_(self):
        return printer(settings=settings).doprint(self)

    expr._repr_latex_ = _repr_latex_
    return expr

latex_set_printer(PyorgLatexPrinter)

def latex(expr, **kwargs):
    return PyorgLatexPrinter(settings=kwargs).doprint(expr)

def print_noparams(expr, **kwargs):
    return NoFuncParamsLatexPrinter(settings=kwargs).doprint(expr)
#+end_src

** Symbols
#+begin_src jupyter-python
lempty = Symbol('')
leq = Symbol('=')
lcolon = Symbol(':')
ldot = Symbol('.')
lquad = Symbol('\\quad ')
limply = Symbol('\\Rightarrow ')
lapprox = Symbol('\\approx ')
lpm = Symbol('\\pm ')
lnewline = Symbol('\n')
lbreak = Symbol('\\\\\n')
lmapsto = Symbol('\\mapsto ')
lamp = Symbol('&')
llt = Symbol('<')
lle = Symbol('\\leq ')
lgt = Symbol('>')
lge = Symbol('\\geq ')
ladd = Symbol('+')
lmul = Symbol('\\dot ')
last = Symbol('\\ast ')
land = Symbol('\\wedge ')
lor = Symbol('\\vee ')
ldots = Symbol('\\dots ')
lbar = Symbol('|')
lcomma = Symbol(',')
lcross = Symbol('\\times')
lprop = Symbol('\\propto ')
#+end_src

** Functions
#+begin_src jupyter-python
def latexify(value):
    if type(value) == dict:
        return LCases(*[LEq(k, v) for k,v in value.items()])
    elif type(value) == list or type(value) == tuple:
        return Latex(*value)
    elif type(value) == str:
        return LText(value)
    elif type(value) == int or type(value) == float:
        return Number(value)
    return value

def inline(expr):
    if not isinstance(expr, Basic):
        expr = Latex(expr)
    expr = expr.replace(LCases, LComma)
    expr = expr.replace(LArray, LComma)
    return PyorgLatexPrinter(settings=dict(mode='inline')).doprint(expr)

def plain(expr):
    if not isinstance(expr, Basic):
        expr = Latex(expr)
    expr = expr.replace(LCases, LComma)
    expr = expr.replace(LArray, LComma)
    return PyorgLatexPrinter(settings=dict(mode='inline')).doprint(expr)
#+end_src

** Base class
#+begin_src jupyter-python
class Latex(Expr):
    def __new__(cls, *args, join=lempty, **kwargs):
        ex = Expr.__new__(cls, *[latexify(arg) for arg in args])
        ex._join = join
        ex._kwargs = kwargs
        return ex

    @property
    def lhs(self):
        return self.apply(lambda arg: arg.lhs if hasattr(arg, 'lhs') else arg)

    @property
    def rhs(self):
        return self.apply(lambda arg: arg.rhs if hasattr(arg, 'rhs') else arg)

    def __call__(self, *args):
        return self.apply(lambda arg: arg(*args) if callable(arg) or isinstance(arg, FunctionClass) else arg)

    def steps(self, expr=None):
        try:
            steps = self.copy(expr) if isinstance(expr, Basic) else self.copy()
        except:
            steps = self.copy()
        for arg in self.args:
            if callable(arg):
                expr = arg(expr)
            else:
                expr = arg
            steps = steps.append(expr)
        return steps

    def __truediv__(self, expr):
        return self.apply(lambda arg: arg/expr)

    def __add__(self, expr):
        return self.apply(lambda arg: arg+expr)

    def __mul__(self, expr):
        return self.apply(lambda arg: arg*expr)

    def __pow__(self, expr):
        return self.apply(lambda arg: arg**expr)

    def __sub__(self, expr):
        return self.apply(lambda arg: arg-expr)

    def __lt__(self, expr):
        return self.apply(lambda arg: arg<expr)

    def __gt__(self, expr):
        return self.apply(lambda arg: arg>expr)

    def __le__(self, expr):
        return self.apply(lambda arg: arg<=expr)

    def __ge__(self, expr):
        return self.apply(lambda arg: arg>=expr)

    def __getitem__(self, idx):
        args = self.args[idx]
        if type(args) == tuple:
            return self.copy(*args)
        return args

    def __len__(self):
        return len(self.args)


    def rdups(self):
        return self.copy(*dict.fromkeys(self.args).keys())

    def apply_args(self, func):
        return [func(arg) if isinstance(arg, Basic) or isinstance(arg, FunctionClass) else arg for arg in self.args]

    def apply(self, func):
        return self.copy(*self.apply_args(func))

    def subs(self, *args, **kwargs):
        return self.apply(lambda arg: arg.subs(*args, **kwargs))

    def doit(self, *args, **kwargs):
        return self.apply(lambda arg: arg.doit(*args, **kwargs))

    def simplify(self, *args, **kwargs):
        return self.apply(lambda arg: arg.simplify(*args, **kwargs))

    def expand(self, *args, **kwargs):
        return self.apply(lambda arg: arg.expand(*args, **kwargs))

    def collect(self, *args, **kwargs):
        return self.apply(lambda arg: arg.collect(*args, **kwargs))

    def together(self, *args, **kwargs):
        return self.apply(lambda arg: arg.together(*args, **kwargs))

    def apart(self, *args, **kwargs):
        return self.apply(lambda arg: arg.apart(*args, **kwargs))

    def ratsimp(self, *args, **kwargs):
        return self.apply(lambda arg: arg.ratsimp(*args, **kwargs))

    def trigsimp(self, *args, **kwargs):
        return self.apply(lambda arg: arg.trigsimp(*args, **kwargs))

    def radsimp(self, *args, **kwargs):
        return self.apply(lambda arg: arg.radsimp(*args, **kwargs))

    def powsimp(self, *args, **kwargs):
        return self.apply(lambda arg: arg.powsimp(*args, **kwargs))

    def combsimp(self, *args, **kwargs):
        return self.apply(lambda arg: arg.combsimp(*args, **kwargs))

    def gammasimp(self, *args, **kwargs):
        return self.apply(lambda arg: arg.gammasimp(*args, **kwargs))

    def factor(self, *args, **kwargs):
        return self.apply(lambda arg: arg.factor(*args, **kwargs))

    def cancel(self, *args, **kwargs):
        return self.apply(lambda arg: arg.cancel(*args, **kwargs))

    # dict => LCases(LColon(a, b)) replacement doesn't work with this?
    # def replace(self, *args, **kwargs):
    #     return self.apply(lambda arg: arg.replace(*args, **kwargs))

    def integrate(self, *args, **kwargs):
        return self.apply(lambda arg: Integral(arg, *args, **kwargs))

    def diff(self, *args, **kwargs):
        return self.apply(lambda arg: Derivative(arg, *args, **kwargs))

    def evalf(self, *args, **kwargs):
        return self.apply(lambda arg: arg.evalf(*args, **kwargs))

    def append(self, *args):
        return self.copy(*self.args, *args)

    def round(self, digits):
        return self.apply(lambda expr: expr.xreplace({n: round(n, digits) for n in expr.atoms(Float)}))

    def compose(self):
        return self.args

    def _latex_args(self, printer):
        return [printer._print(arg) for arg in self.compose()]

    def _latex(self, printer):
        return printer._print(self._join).join(self._latex_args(printer))

    def copy(self, *args):
        return self.__class__(*args, join=self._join, **self._kwargs)

    def transpose(self, inner):
        return self.copy(*map(lambda e: inner(*e), zip(*self.args)))
#+end_src


** Classes
#+begin_src jupyter-python
class LText(Symbol):
    def __new__(cls, text):
        return Symbol.__new__(cls, text)

    def _latex(self, printer):
        return printer._print(self.name)


class LVExpectation(Expr):
    def _latex(self, printer):
        return f"\\left<{printer._print(self.args[0])}\\right>"

class LMean(Expr):
    def _latex(self, printer):
        return f"\\overline{{{printer._print(self.args[0])}}}"

class LHat(Expr):
    def _latex(self, printer):
        return f"\\hat {printer._print(self.args[0])}"

class LSteady(Expr):
    def _latex(self, printer):
        return f"{printer._print(self.args[0])}^{{\\ast}}"

class LTilde(Expr):
    def _latex(self, printer):
        return f"\\widetilde {printer._print(self.args[0])}"

class LInverse(Expr):
    def _latex(self, printer):
        return f"\\left({printer._print(self.args[0])}\\right)^{{-1}}"

class LCarets(Expr):
    def _latex(self, printer):
        return f"\\left<{printer._print(self.args[0])}\\right>"

class LSet(Expr):
    def _latex(self, printer):
        return f"\\left\\{{{','.join([printer._print(arg) for arg in self.args])}\\right\\}}"

class LArgmax(Expr):
    def _latex(self, printer):
        return f"\\operatorname{{argmax}}_{{{printer._print(self.args[0])}}}{{{printer._print(self.args[1])}}}"

class LUnaryOperation(Latex):
    def __new__(cls, arg, join=None):
        return Latex.__new__(cls, arg, join=join)

    @property
    def inner(self):
        return self[0]


class LUnaryOperationEval(LUnaryOperation):
    op = None

    def doit(self, *args, **kwargs):
        return self.__class__.op(*self.apply(lambda a: a.doit(*args, **kwargs))).doit(*args, **kwargs)

class LProbability(LUnaryOperationEval):
    op = Probability

    def _latex(self, printer):
        return f"P[{printer._print(self.args[0])}]"

class LBinaryOperation(Latex):
    def __new__(cls, *args, join=None):
        if not join:
            join = cls.join
        return Latex.__new__(cls, *args, join=join)

    @property
    def lhs(self):
        return self[0]

    @property
    def rhs(self):
        return self[-1]

class LBinaryOperationEval(LBinaryOperation):
    op = Eq

    def doit(self, *args, **kwargs):
        op = self.__class__.op
        opargs = self.apply_args(lambda arg: arg.doit(*args, **kwargs))
        if len(self) == 2:
            return op(*opargs)
        elif len(self) > 2:
            expr = op(opargs[0], opargs[1])
            for i in range(1, len(opargs)):
                expr = And(expr, op(opargs[i-1], opargs[i]))
            return expr
        return self

class LRelational(LBinaryOperationEval, Boolean):
    def _eval_as_set(self):
        # return self.__class__.op(*self.args)._eval_as_set()
        op = self.__class__.op
        if len(self) == 2:
            return op(*self.args)._eval_as_set()
        elif len(self) > 2:
            expr = op(self.args[0], self.args[1])
            for i in range(1, len(self.args)):
                expr = LAnd(expr, op(self.args[i-1], self.args[i]))
            return expr._eval_as_set()
        return self

class LEquality(LRelational):
    op = Eq
    join = leq

class LColon(LBinaryOperation):
    join = lcolon

class LQuad(LBinaryOperation):
    join = lquad

class LApprox(LBinaryOperation):
    join = lapprox

class LPm(LBinaryOperation):
    join = lpm

class LProp(LBinaryOperation):
    join = lprop

class LWhere(LBinaryOperation):
    join = Latex(lquad, "where", lquad)

class LIf(LBinaryOperation):
    join = Latex(lquad, "if", lquad)

class LFor(LBinaryOperation):
    join = Latex(lquad, "for", lquad)

class LAdd(LBinaryOperationEval):
    op = Add
    join = ladd

class LMul(LBinaryOperationEval):
    op = Mul
    join = lmul

class LLt(LRelational):
    op = Lt
    join = llt

class LLe(LRelational):
    op = Le
    join = lle

class LGt(LRelational):
    op = Gt
    join = lgt

class LGe(LRelational):
    op = Ge
    join = lge

class LAnd(LRelational):
    op = And
    join = land

class LGiven(LBinaryOperation):
    join = lbar

class LComma(LBinaryOperation):
    join = lcomma

LEq = LEquality


class LImplies(LBinaryOperation):
    op = Implies
    join = limply

class LMapsTo(LBinaryOperation):
    join = lmapsto

class LCalculation(LBinaryOperation):
    join = leq

    def _latex(self, printer):
        if len(self) > 2:
            return printer._print(LAligned(
                Latex(self[0], lamp, self._join, self[1]), self._join, lbreak,
                ,*self[2:-1].apply(lambda e: Latex(lamp, self._join, e, self._join, lbreak)),
                lamp, self._join, self[-1]
            ))
        else:
            return printer._print(LBinaryOperation(*self, join=self._join))

class LSubscript(Latex):
    def _latex(self, printer):
        return '_'.join([f"{{{printer._print(arg)}}}" for arg in self.args])

class LSuperscript(Latex):
    def _latex(self, printer):
        return '^'.join([f"{{{printer._print(arg)}}}" for arg in self.args])

class LCurly(Latex):
    def _latex(self, printer):
        return f"\\{{{printer._print(self.args[0])}\\}}"

class LBegin(Latex):
    def __new__(cls, *args):
        ex = Latex.__new__(cls, *args)
        ex._options = args
        return ex

    def _latex(self, printer):
        options = ''.join([f"{{{option}}}" for option in self._options])
        return f"\\begin{options}"

class LEnd(Latex):
    def __new__(cls, *args):
        ex = Latex.__new__(cls, *args)
        ex._options = args
        return ex

    def _latex(self, printer):
        options = ''.join([f"{{{option}}}" for option in self._options])
        return f"\\end{options}"

class LEnvironment(Latex):
    name = 'environment'

    def __new__(cls, *args, name=None, options=[], join=lnewline, env_join=lnewline):
        if not name:
            name = cls.name

        ex = Latex.__new__(cls, *args, join=join)
        ex._name = name
        ex._env_join = env_join
        ex._options = options
        return ex

    def compose(self):
        return [
            LBegin(self._name, *self._options),
            Latex(*self.args, join=self._env_join),
            LEnd(self._name)
        ]


class LArray(LEnvironment):
    name = 'array'

    def __new__(cls, *args, align='l', join=lnewline):
        return LEnvironment.__new__(cls, *args, name=cls.name, join=join, env_join=lbreak, options=[align])

class LEquation(LEnvironment):
    name = 'equation'

class LCases(LEnvironment):
    name = 'cases'
    def __new__(cls, *args, join=lnewline):
        return LEnvironment.__new__(cls, *args, name=cls.name, env_join=lbreak, join=join)

class LPiecewise(LEnvironment):
    name = 'cases'
    def __new__(cls, *args, join=lnewline):
        return LEnvironment.__new__(cls, *args, name=cls.name, env_join=lempty, join=join)

class LAligned(LEnvironment):
    name = 'aligned'
    def __new__(cls, *args, join=lnewline):
        return LEnvironment.__new__(cls, *args, name=cls.name, env_join=lempty, join=join)

class LFunction(LEq):
    def __call__(self, *args):
        s = zip(self[0].args, args)
        value = self.args[1].subs(s)
        return LEq(self.args[0].subs(s), value)

    def lambdify(self, *args):
        return lambdify(args, self._lambda(*args))

class LStep(Latex):
    def __call__(self, expr):
        return self.transform(expr)

    def explain(self):
        return Id

    def _latex(self, printer):
        return printer._print(self.explain())

class LLambdaStep(LStep):
    def __new__(cls, arg, op):
        ex = LStep.__new__(cls, arg, op)
        ex._arg = arg
        ex._op = op
        return ex

    def transform(self, expr):
        return self._op.subs(self._arg, expr)

    def explain(self):
        return LMapsTo(self._arg, self._op)

class LSubsStep(LStep):
    def transform(self, expr):
        return expr.subs(*self.args)

    def explain(self):
        return LMapsTo(*self.args)

class LApplyStep(LStep):
    def __new__(cls, func, *args):
        ex = LStep.__new__(cls, *args)
        ex._func = func
        return ex

    def transform(self, expr):
        return self._func(expr, *self.args)

class LSimplifyStep(LStep):
    def transform(self, expr):
        return expr.simplify(*self.args)

class LRewriteStep(LStep):
    def transform(self, expr):
        return expr.rewrite(*self.args)

class LDoitStep(LStep):
    def transform(self, expr):
        return expr.doit(*self.args)

class LReplaceStep(LStep):
    def transform(self, expr):
        print(expr, self.args)
        return expr.replace(self.args[0], self.args[1])

class LReplaceInnerStep(LStep):
    def transform(self, expr):
        func, replacement = self.args
        def _replace(*args):
            r = replacement(func(*args))
            print(args, func(*args), r)
            return r
        return expr.replace(func, _replace)

class LFactorStep(LStep):
    def transform(self, expr):
        return expr.factor(*self.args)

class LExpandStep(LStep):
    def transform(self, expr):
        return expr.expand(*self.args)

class LEvalfStep(LStep):
    def transform(self, expr):
        return expr.evalf(*self.args)

class LMapArgsStep(LStep):
    def transform(self, expr):
        wrap = self.args[0]
        action = self.args[1]
        return wrap(*map(action, expr.args))
#+end_src
