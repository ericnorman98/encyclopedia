#+title: Spatial SIR simulation
#+roam_tags: sir simulation spatial

#+call: init()

* Lib :noexport:
:PROPERTIES:
:header-args: :results silent
:END:

#+begin_src jupyter-python
import time
import numba
from enum import IntEnum
import numpy as np
import matplotlib.pyplot as plt
from sympy import *
from pyorg.latex import *
from matplotlib.animation import FuncAnimation
#+end_src

#+begin_src jupyter-python :results silent
SUSCEPTIBLE = 0
INFECTIOUS = 1
RECOVERED = 2
#+end_src

#+begin_src jupyter-python :results silent
@numba.njit()
def random_walk(position, lattice, state, L, d=1.0, beta=0.6):
    for i in range(len(position)):
        if np.random.rand() < d:
            di = np.random.randint(4)
            x = nx = position[i, 0]
            y = ny = position[i, 1]
            if di == 0:
                nx += 1
            elif di == 1:
                nx -= 1
            elif di == 2:
                ny += 1
            elif di == 3:
                ny -= 1
            if nx > 0 and ny > 0 and nx < L and ny < L:
                if state[i] == INFECTIOUS:
                    lattice[x, y] -= 1
                    lattice[nx, ny] += 1
                elif state[i] == SUSCEPTIBLE:
                    if lattice[nx, ny]:
                        if np.random.rand() < beta:
                            state[i] = INFECTIOUS
                position[i, 0] = nx
                position[i, 1] = ny
#+end_src

#+begin_src jupyter-python :results silent
def create_random_position(V):
    return np.random.randint(V[L], size=[V[N], 2])
#+end_src

#+begin_src jupyter-python :results silent
def create_overlap_lattice(position, state, V):
    lattice = np.zeros([V[L], V[L]], dtype=int)
    for i in range(len(position)):
        if state[i] == INFECTIOUS:
            lattice[position[i, 0], position[i, 1]] += 1
    return lattice
#+end_src

#+begin_src jupyter-python :results silent :noweb yes
state_colors = np.array([<<color("green")>>, <<color("red")>>, <<color("blue")>>])
def plot_agents(position, state, V, ax=None, **kwargs):
    if ax is None:
        ax = plt.gca()
    scatter = ax.scatter(position[:, 0], position[:, 1], c=state_colors[state], **kwargs)
    ax.set_xlim([0, V[L]])
    ax.set_ylim([0, V[L]])
    return scatter
#+end_src

#+begin_src jupyter-python :results silent
def draw_agents_mpl(scatter, position, state, N):
    scatter.set_offsets(position)
    scatter.set_fc(state_colors[state])
    return [scatter]
#+end_src

#+begin_src jupyter-python :results silent
@numba.njit()
def recover(position, lattice, state, gamma):
    for i in range(len(position)):
        if state[i] == INFECTIOUS:
            if np.random.rand() < gamma:
                state[i] = RECOVERED
                lattice[position[i, 0], position[i, 1]] -= 1
#+end_src

#+begin_src jupyter-python :results none
@numba.njit()
def step(position, lattice, state, L, d, beta, gamma):
    random_walk(position, lattice, state, L, d, beta)
    recover(position, lattice, state, gamma)
#+end_src

* Spatial SIR simulation
This is an investigation into a model similar to the SIR model. The difference
is that it takes spatial effects into account by simulating individual
interacting agents on a lattice. The next section will describe each part of the
simulation in detail.

#+begin_src jupyter-python :results silent
import pygame
#+end_src

#+begin_src jupyter-python :results silent
d, beta, gamma = symbols('d beta gamma', real=True, positive=True)
N, L = symbols('N L', integer=True)
#+end_src

** Random walk
The are multiple ways of doing a random walk on a lattice. In this simulation we
will use the /von Neumann neighborhood/ for movement, which means the agents can
only move; up, down, left, right. Each agent can also stay still with
probability $1-d$, where $d$ is the /diffusion rate/.

#+begin_src jupyter-python
V = {
    d: 0.5,
    N: 1,
    L: 20
}
LValues(V)
#+end_src

#+RESULTS:
:RESULTS:
\begin{equation}\begin{cases}
d = 0.5\\
N = 1\\
L = 20
\end{cases}\end{equation}
:END:

#+begin_src jupyter-python :results output :noweb yes
plt.figure(figsize=(2, 2))
V = {
    d: 0.5,
    N: 1,
    L: 20
}
position = np.array([V[L]/2, V[L]/2], dtype=int).reshape([V[N], 2])
state = np.zeros(1)
lattice = create_overlap_lattice(position, state, V)
positions = [position.copy()]
steps = 200
stepr = np.arange(steps)
for _ in stepr:
    random_walk(position, lattice, np.array([0]), V[L])
    positions.append(position.copy())
positions = np.array(positions)
for i in range(steps-1):
    plt.plot(positions[i:i+2, 0, 0], positions[i:i+2, 0, 1], alpha=(i+1)/(steps-2), color=<<color("brightblack4")>>, lw=1.0)
plot_agents(position, np.zeros(V[N], dtype=int), V, zorder=10)
plt.xticks([])
plt.yticks([])
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/42c5b31989df9e08af183d5caf206664aeeb26bd.png]]

** Infection
If the location of multiple agents is in the same lattice point, they are at
risk of infection with probability $\beta$. We can simulate this probability by
using a random variable $r\in [0,1]$ and checking if it is smaller than $\beta$.
If multiple infected on one point, use $r < 1-(1-\beta^k)$ where $k$ is the number of
infected agents.

#+begin_src jupyter-python :results output :exports none
V = {
    L: 4
}
fig, ax = plt.subplots(figsize=(2, 2))
ax.set_aspect(1)
ax.set_xticks([])
ax.set_yticks([])
state = np.array([SUSCEPTIBLE,
                  INFECTIOUS])
position = np.array([(2, 2), (1, 2)])
scatter = plot_agents(position, state, V, ax=ax, s=128)
ax.set_ylim([1, 3])

def init():
    return [scatter]

def animate(i):
    scatter.set_offsets(position)
    position[1, 0] += 1
    if i == 1:
        state[0] = INFECTIOUS
        scatter.set_fc(state_colors[state])
    return [scatter]

anim = FuncAnimation(fig, animate, init_func=init, frames=3, blit=True)
with open('sir_infect.html', 'w') as f:
    f.write(anim.to_jshtml())
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/5cc7aff71d8d43667a046c52765164903512a93b.png]]

# #+include: sir_infect.html export html

** Recovery
The last part of the simulation is /recovery/, each infected agent can recover
each step with probability $\gamma$. Similar to the infection simulation,
checking if a random number $q\in [0,1]$ is less than $\gamma$ determines if an
agent should recover from the infection.

# Figure [[fig-sim-small]] shows a simulation with both recovery and infection, it is
# simulating $100$ agents on a $10\times10$ lattice. The population quickly gets
# infected due to the limited space on the lattice in the simulation.


#+begin_src jupyter-python :results output :results silent :eval no
pygame.init()

screen = pygame.display.set_mode((512,512))
#+end_src

#+begin_src jupyter-python :results silent
def draw_agents_pygame(screen, position, state, size, N):
    for i in range(N):
        if state[i] == SUSCEPTIBLE:
            pygame.draw.circle(screen, (0,255,0), (position[i, 0]*size,position[i, 1]*size), size/2)
        elif state[i] == INFECTIOUS:
            pygame.draw.circle(screen, (255,0,0), (position[i, 0]*size,position[i, 1]*size), size/2)
        elif state[i] == RECOVERED:
            pygame.draw.circle(screen, (0,0,255), (position[i, 0]*size,position[i, 1]*size), size/2)
#+end_src

#+begin_src jupyter-python :results output :results silent :eval no
V = {
    L: 128,
    N: 2048,
    d: 0.8,
    beta: 0.6,
    gamma: 0.01
}
black = (0, 0, 0)
position = create_random_position(V)
state = np.zeros(V[N], dtype=int)
state[0:10] = 1
lattice = create_overlap_lattice(position, state, V)
cellsize = 512/V[L]
for _ in range(200):
    step(position, lattice, state, V[L], V[d], V[beta], V[gamma])
    screen.fill(black)
    draw_agents_pygame(screen, position, state, cellsize, V[N])
    pygame.display.update()
    time.sleep(0.02)
#+end_src

#+begin_src jupyter-python :results output :exports none
V = {
    L: L_n,
    N: 1024,
    d: 0.02,
    beta: 0.9,
    gamma: 0.001
}
fig, ax = plt.subplots(figsize=(2, 2))
ax.set_aspect(1)
ax.set_xticks([])
ax.set_yticks([])
position = []
for x in range(V[L]):
    for y in range(V[L]):
        if meltext[x, y]:
            position.append((x, y))
position = np.array(position)
V[N] = len(position)
state = np.zeros(V[N], dtype=int)
state[0:int(V[N]*0.01)] = 1
np.random.shuffle(state)
lattice = create_overlap_lattice(position, state, V)
cellsize = 512/V[L]

scatter = plot_agents(position, state, V, ax=ax, s=L_n/512)

def gen():
    global state
    i = 0
    while (state == INFECTIOUS).sum() > 0:
        i += 1
        yield i

def init():
    return [scatter]

def animate(i):
    step(position, lattice, state, V[L], V[d], V[beta], V[gamma])
    screen.fill(black)
    draw_agents_pygame(screen, position, state, cellsize, V[N])
    pygame.display.update()
    return draw_agents_mpl(scatter, position, state, V[N])

anim = FuncAnimation(fig, animate, frames=gen, init_func=init, blit=True, save_count=10000)
anim.save('sir_simulation.mp4', fps=30, bitrate=1024)
print("DONE")
#+end_src

#+RESULTS:
:RESULTS:
# [goto error]
#+begin_example

KeyboardInterruptTraceback (most recent call last)
~/.pyenv/versions/org/lib/python3.8/site-packages/matplotlib/animation.py in saving(self, fig, outfile, dpi, *args, **kwargs)
    250         try:
--> 251             yield self
    252         finally:

~/.pyenv/versions/org/lib/python3.8/site-packages/matplotlib/animation.py in save(self, filename, writer, fps, dpi, codec, bitrate, extra_args, metadata, extra_anim, savefig_kwargs, progress_callback)
   1140                     # TODO: See if turning off blit is really necessary
-> 1141                     anim._draw_next_frame(d, blit=False)
   1142                     if progress_callback is not None:

~/.pyenv/versions/org/lib/python3.8/site-packages/matplotlib/animation.py in _draw_next_frame(self, framedata, blit)
   1176         self._draw_frame(framedata)
-> 1177         self._post_draw(framedata, blit)
   1178

~/.pyenv/versions/org/lib/python3.8/site-packages/matplotlib/animation.py in _post_draw(self, framedata, blit)
   1201         else:
-> 1202             self._fig.canvas.draw_idle()
   1203

~/.pyenv/versions/org/lib/python3.8/site-packages/matplotlib/backend_bases.py in draw_idle(self, *args, **kwargs)
   2011             with self._idle_draw_cntx():
-> 2012                 self.draw(*args, **kwargs)
   2013

~/.pyenv/versions/org/lib/python3.8/site-packages/matplotlib/backends/backend_agg.py in draw(self)
    406               else nullcontext()):
--> 407             self.figure.draw(self.renderer)
    408             # A GUI class may be need to update a window using this draw, so

~/.pyenv/versions/org/lib/python3.8/site-packages/matplotlib/artist.py in draw_wrapper(artist, renderer, *args, **kwargs)
     40
---> 41             return draw(artist, renderer, *args, **kwargs)
     42         finally:

~/.pyenv/versions/org/lib/python3.8/site-packages/matplotlib/figure.py in draw(self, renderer)
   1862             self.patch.draw(renderer)
-> 1863             mimage._draw_list_compositing_images(
   1864                 renderer, self, artists, self.suppressComposite)

~/.pyenv/versions/org/lib/python3.8/site-packages/matplotlib/image.py in _draw_list_compositing_images(renderer, parent, artists, suppress_composite)
    130         for a in artists:
--> 131             a.draw(renderer)
    132     else:

~/.pyenv/versions/org/lib/python3.8/site-packages/matplotlib/artist.py in draw_wrapper(artist, renderer, *args, **kwargs)
     40
---> 41             return draw(artist, renderer, *args, **kwargs)
     42         finally:

~/.pyenv/versions/org/lib/python3.8/site-packages/matplotlib/cbook/deprecation.py in wrapper(*inner_args, **inner_kwargs)
    410                 **kwargs)
--> 411         return func(*inner_args, **inner_kwargs)
    412

~/.pyenv/versions/org/lib/python3.8/site-packages/matplotlib/axes/_base.py in draw(self, renderer, inframe)
   2746
-> 2747         mimage._draw_list_compositing_images(renderer, self, artists)
   2748

~/.pyenv/versions/org/lib/python3.8/site-packages/matplotlib/image.py in _draw_list_compositing_images(renderer, parent, artists, suppress_composite)
    130         for a in artists:
--> 131             a.draw(renderer)
    132     else:

~/.pyenv/versions/org/lib/python3.8/site-packages/matplotlib/artist.py in draw_wrapper(artist, renderer, *args, **kwargs)
     40
---> 41             return draw(artist, renderer, *args, **kwargs)
     42         finally:

~/.pyenv/versions/org/lib/python3.8/site-packages/matplotlib/collections.py in draw(self, renderer)
    930         self.set_sizes(self._sizes, self.figure.dpi)
--> 931         Collection.draw(self, renderer)
    932

~/.pyenv/versions/org/lib/python3.8/site-packages/matplotlib/artist.py in draw_wrapper(artist, renderer, *args, **kwargs)
     40
---> 41             return draw(artist, renderer, *args, **kwargs)
     42         finally:

~/.pyenv/versions/org/lib/python3.8/site-packages/matplotlib/collections.py in draw(self, renderer)
    405         else:
--> 406             renderer.draw_path_collection(
    407                 gc, transform.frozen(), paths,

~/.pyenv/versions/org/lib/python3.8/site-packages/matplotlib/backends/backend_agg.py in draw_path_collection(self, gc, master_transform, paths, all_transforms, offsets, offsetTrans, facecolors, edgecolors, linewidths, linestyles, antialiaseds, urls, offset_position)
    171                 "deprecated since %(since)s and will be removed %(removal)s.")
--> 172         return self._renderer.draw_path_collection(
    173             gc, master_transform, paths, all_transforms, offsets, offsetTrans,

~/.pyenv/versions/org/lib/python3.8/site-packages/matplotlib/path.py in vertices(self)
    201
--> 202     @property
    203     def vertices(self):

KeyboardInterrupt:

During handling of the above exception, another exception occurred:

CalledProcessErrorTraceback (most recent call last)
<ipython-input-81-7d83e6c96789> in <module>
     43
     44 anim = FuncAnimation(fig, animate, frames=gen, init_func=init, blit=True, save_count=10000)
---> 45 anim.save('sir_simulation.mp4', fps=30, bitrate=1024)
     46 print("DONE")

~/.pyenv/versions/org/lib/python3.8/site-packages/matplotlib/animation.py in save(self, filename, writer, fps, dpi, codec, bitrate, extra_args, metadata, extra_anim, savefig_kwargs, progress_callback)
   1143                         progress_callback(frame_number, total_frames)
   1144                         frame_number += 1
-> 1145                 writer.grab_frame(**savefig_kwargs)
   1146
   1147     def _step(self, *args):

~/.pyenv/versions/3.8.5/lib/python3.8/contextlib.py in __exit__(self, type, value, traceback)
    129                 value = type()
    130             try:
--> 131                 self.gen.throw(type, value, traceback)
    132             except StopIteration as exc:
    133                 # Suppress StopIteration *unless* it's the same exception that

~/.pyenv/versions/org/lib/python3.8/site-packages/matplotlib/animation.py in saving(self, fig, outfile, dpi, *args, **kwargs)
    251             yield self
    252         finally:
--> 253             self.finish()
    254
    255

~/.pyenv/versions/org/lib/python3.8/site-packages/matplotlib/animation.py in finish(self)
    352     def finish(self):
    353         """Finish any processing for writing the movie."""
--> 354         self.cleanup()
    355
    356     def grab_frame(self, **savefig_kwargs):

~/.pyenv/versions/org/lib/python3.8/site-packages/matplotlib/animation.py in cleanup(self)
    388                 "MovieWriter stderr:\n%s", err)
    389         if self._proc.returncode:
--> 390             raise subprocess.CalledProcessError(
    391                 self._proc.returncode, self._proc.args, out, err)
    392

CalledProcessError: Command '['ffmpeg', '-f', 'rawvideo', '-vcodec', 'rawvideo', '-s', '400x400', '-pix_fmt', 'rgba', '-r', '30', '-loglevel', 'error', '-i', 'pipe:', '-vcodec', 'h264', '-pix_fmt', 'yuv420p', '-b', '1024k', '-y', 'sir_simulation.mp4']' returned non-zero exit status 255.
#+end_example
[[file:./.ob-jupyter/82129aae6a441474188cfc22dfb542d9d4a55e51.png]]
:END:

[[video:sir_simulation.mp4]]
