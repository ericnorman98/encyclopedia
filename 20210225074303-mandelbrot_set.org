#+title: Mandelbrot set
#+roam_tags: fractal mandelbrot set recursion

#+call: init()

#+RESULTS:

* TODO Lib :noexport:
:PROPERTIES:
:header-args: :tangle encyclopedia/mandelbrot_set.py :results silent
:END:

#+begin_src jupyter-python
import matplotlib.pyplot as plt
from matplotlib.animation import FuncAnimation
import numba
from pyorg.latex import *
import numpy as np
#+end_src

#+RESULTS:

* Mandelbrot set
The first and probably most known fractal is the Mandelbrot set. This fractal
is made by repeatedly applying an expression to a complex number. This
expression looks like this:

\begin{equation}
z_{n+1}=z_n^2+c
\end{equation}

The expression for generating a Mandelbrot set is very simple, yet it creates
some unbelievably complex structures. All you have to do is repeatedly squaring
and adding a complex number. If you do this process for each pixel in an image,
where the x coordinate is the real number and the y coordinate is the magnitute
of the imaginary number according this formula:

\begin{equation}
c_{xy}=x+i y
\end{equation}

When applying this formula for a whole image for about 100 iterations and taking
the magnitude of each complex number, this is the result:

#+BEGIN_SRC jupyter-python
@numba.njit
def mandelbrot_iter(c,maxiter):
    z = c
    for n in range(maxiter):
        if abs(z) > 2:
            return n
        z = z*z + c
    return 0

@numba.njit
def mandelbrot(w, h, cx, cy, s, max_iter=50):
    xmin = cx-0.5*s
    xmax = cx+0.5*s
    ymin = cy-0.5*s
    ymax = cy+0.5*s
    x = np.linspace(xmin, xmax, w)
    y = np.linspace(ymin, ymax, h)
    z = np.empty((w, h))

    for i in range(w):
        for j in range(h):
            z[i,j] = mandelbrot_iter(x[i] + 1j*y[j], max_iter)

    max_ = np.max(z)
    min_ = np.min(z)
    z = (z-min_) / (max_ - min_)
    return z
#+END_SRC


#+thumb:
#+name: src:fig:mandelbrot_img
#+BEGIN_SRC jupyter-python :results output
cx = -0.8
cy = 0.0
s = 3
z = mandelbrot(400, 400, cx, cy, s, max_iter=100)
plt.imshow(z, cmap=green_cmap)
plt.axis('off')
#+END_SRC

#+caption: Mandelbrot set
#+RESULTS: src:fig:mandelbrot_img
[[file:./.ob-jupyter/052257724057c4342fe8620c1ebafad1ee1ab6b9.png]]

To really see how incredibly complex this structure is, you have to zoom in.
When zooming in, the number of steps taken for each pixel needs to be increased
to see more detail. That is why it gets slower as you go deeper, when zooming
really far you even start to get floating point problems.

Here is an animation of zooming in to where the viewport is about 0.001 units in
width:

#+BEGIN_SRC jupyter-python :exports none
fig = plt.figure()
fig.set_size_inches((4, 4))
ax = plt.Axes(fig, [0., 0., 1., 1.])
ax.set_axis_off()
fig.add_axes(ax)
cx = -0.7463
cy = 0.1102

mb = mandelbrot(400, 400, cx, cy, s, max_iter=100)
img = ax.imshow(mb, aspect='equal', cmap=green_cmap)

steps = 384

def init():
    return [img]

def animate(i):
    t = i/steps
    s = 3*(np.exp(-8*t))
    mb = mandelbrot(400, 400, cx, cy, s, max_iter=int(100+t*200))
    img.set_data(mb)
    return [img]

anim = FuncAnimation(fig, animate, frames=steps, init_func=init, interval=20, blit=True)
anim.save('mandelbrot.gif')
#+END_SRC

#+RESULTS:
:RESULTS:
: <ipython-input-7-36ac708f9789>:24: UserWarning: This figure includes Axes that are not compatible with tight_layout, so results might be incorrect.
:   anim = FuncAnimation(fig, animate, frames=steps, init_func=init, interval=20, blit=True)
: <ipython-input-7-36ac708f9789>:25: UserWarning: This figure includes Axes that are not compatible with tight_layout, so results might be incorrect.
:   anim.save('mandelbrot.gif')
: /home/eric/.pyenv/versions/org/lib/python3.8/site-packages/IPython/core/pylabtools.py:132: UserWarning: This figure includes Axes that are not compatible with tight_layout, so results might be incorrect.
:   fig.canvas.print_figure(bytes_io, **kw)
[[file:./.ob-jupyter/83b0f0c8f082a9488a62a59fe0e48dd6162e009b.png]]
:END:


[[./mandelbrot.gif]]
